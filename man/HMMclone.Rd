% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fitHMM.R
\name{HMMclone}
\alias{HMMclone}
\title{Copy number calling for multiple clones using Hidden Markov Models}
\usage{
HMMclone(
  dat,
  selftransitionprob = 0.99,
  maxCN = 15,
  sd_value = 0.2,
  clone_coverage = NULL,
  usecpp = TRUE,
  ncores = 1,
  progressbar = TRUE
)
}
\arguments{
\item{dat}{Data frame with columns: clone_id, chr, start, end, copy.
Additional columns are preserved in output.}

\item{selftransitionprob}{Probability of staying in the same copy number state (default: 0.99)}

\item{maxCN}{Maximum copy number state to consider (default: 15)}

\item{sd_value}{Standard deviation for emission model when clone_coverage is NULL (default: 0.2)}

\item{clone_coverage}{Optional data frame with clone-specific parameters.
Should have columns: clone_id and either 'coverage' or 'n_cells'}

\item{usecpp}{Logical, whether to use C++ implementation (default: TRUE)}

\item{ncores}{Number of cores for parallel processing (default: 1)}

\item{progressbar}{Logical, whether to show progress bar (default: TRUE)}
}
\value{
Data frame with original data plus 'state' column containing
inferred copy number states for each genomic bin
}
\description{
Main function for calling copy number states across multiple clones from
single-cell whole genome sequencing data. Processes each clone and chromosome
separately using Hidden Markov Models.
}
\details{
The function:
\enumerate{
\item Sorts data by clone, chromosome, and position
\item Applies clone-specific standard deviations if clone_coverage provided
\item Processes each clone separately (optionally in parallel)
\item Fits HMM chromosome-wise to avoid unrealistic inter-chromosomal transitions
\item Fills in states for bins excluded from inference (keep = FALSE)
}

If a 'keep' column is present, only bins with keep = TRUE are used for
inference. States for excluded bins are filled based on neighboring states.
}
\examples{
# Create example data
library(data.table)
dat <- data.frame(
  clone_id = rep("clone1", 100),
  chr = rep("1", 100),
  start = seq(1, 1000000, 10000),
  end = seq(10000, 1000000, 10000),
  copy = c(rep(2, 50), rep(4, 30), rep(2, 20)) + rnorm(100, 0, 0.2)
)

# Call copy numbers
results <- HMMclone(dat, selftransitionprob = 0.99, maxCN = 6)

# With clone coverage information
clone_cov <- data.frame(clone_id = "clone1", coverage = 0.5)
results <- HMMclone(dat, clone_coverage = clone_cov)

}
